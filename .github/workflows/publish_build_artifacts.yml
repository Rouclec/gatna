name: Publish Build Artifacts

on:
  push:
    branches:
      - main
      - 'release/*'
    tags: 
      - '*'

# Necessary permissions for workflow
permissions:
  id-token: write
  contents: read


jobs:
  app:
      name: Build and Publish APP Docker Image
      runs-on: ubuntu-latest

      steps:
          - name: Check out code
            uses: actions/checkout@v2


          - uses: mikefarah/yq@v4.44.3
            with:
                cmd: yq -V
    
    
          - name: Read the account id of the Artifact account
            id: read_artifact_account_id
            run: |
              ARTIFACT_ACCOUNT_ID=$(yq eval '.aws_account_id' cd/artifact-account-config.yaml)
              # Set the value as an output
              echo "::set-output name=artifact_account_id::$ARTIFACT_ACCOUNT_ID"
    
          # Assume the OIDC Role to get temporary credentials 
          - uses: aws-actions/configure-aws-credentials@v4
            with:
              aws-region: us-east-1
              role-to-assume: arn:aws:iam::${{ steps.read_artifact_account_id.outputs.artifact_account_id }}:role/deploy

          - name: Login to Amazon ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v1


          - name: Build Docker Image and Push to Amazon ECR
            env:
              GOPRIVATE: "github.com/Rouclec"
              ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
              ECR_REPOSITORY_NAME: ${{github.repository}}
              IMAGE_TAG: ${{github.sha}}
            run: |
                ECR_REPOSITORY_NAME=$(echo "$ECR_REPOSITORY_NAME" | tr '[:upper:]' '[:lower:]')"-app"
                docker build -f ./Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG .
                docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG



          - name: Cache Docker layers
            uses: actions/cache@v2
            with:
                path: /tmp/.buildx-cache
                key: ${{ runner.os }}-buildx-${{ github.sha }}
                restore-keys: |
                    ${{ runner.os }}-buildx-




  infra:
      name: Publish Infra Artifacts
      runs-on: ubuntu-latest

      steps:
          - name: Check out code
            uses: actions/checkout@v2


          - uses: mikefarah/yq@v4.44.3
            with:
                cmd: yq -V
    
    
          - name: Read the account id of the Artifact account
            id: read_artifact_account_id
            run: |
              ARTIFACT_ACCOUNT_ID=$(yq eval '.aws_account_id' cd/artifact-account-config.yaml)
              # Set the value as an output
              echo "::set-output name=artifact_account_id::$ARTIFACT_ACCOUNT_ID"
    
          # Assume the OIDC Role to get temporary credentials 
          - uses: aws-actions/configure-aws-credentials@v4
            with:
              aws-region: us-east-1
              role-to-assume: arn:aws:iam::${{ steps.read_artifact_account_id.outputs.artifact_account_id }}:role/deploy

          - name: Grant execute permissions to all .sh files in infra/bin
            run: chmod +x infra/bin/*.sh

          - name: Test
            env:
              ARTIFACTS_STACK_NAME: 'artifact-account-setup'
              CF_DIR: 'cloudformation'
            run: cd infra && ./bin/test.sh
        
          - name: Upload Cloudformation Templates to S3
            env:
              ARTIFACTS_STACK_NAME: 'artifact-account-setup'
              CF_DIR: 'cloudformation'
            run: cd infra && ./bin/upload_artifacts.sh
                
         
  deploy:
      needs: [app, infra]
      name: Deploy Dev Environment
      runs-on: ubuntu-latest

      steps:
          - name: Check out code
            uses: actions/checkout@v2


          - uses: mikefarah/yq@v4.44.3
            with:
                cmd: yq -V
    
    
          - name: Read the account id of the Artifact account
            id: read_artifact_account_id
            run: |
              ARTIFACT_ACCOUNT_ID=$(yq eval '.aws_account_id' cd/artifact-account-config.yaml)
              # Set the value as an output
              echo "::set-output name=artifact_account_id::$ARTIFACT_ACCOUNT_ID"
    
          # Assume the OIDC Role to get temporary credentials 
          - uses: aws-actions/configure-aws-credentials@v4
            with:
              aws-region: us-east-1
              role-to-assume: arn:aws:iam::${{ steps.read_artifact_account_id.outputs.artifact_account_id }}:role/deploy
          - name: deploy
            env:
              IMAGE_TAG: ${{github.sha}}
            run: |
              env_id="dev"
              system_id="dev"
              template_path="infra/cloudformation/deploy_env.yaml"
              stack_name="gatna-$env_id"
              system_stack_name="placeholder"
              domain_name="gatna.io"
              is_default_env="false"
              app_image_tag="$IMAGE_TAG"
              infra_tag="$IMAGE_TAG"

              aws cloudformation deploy \
              --template-file "$template_path"  \
              --stack-name "$stack_name"  \
              --parameter-overrides \
              SystemId="$system_id" \
              EnvId="$env_id" \
              CloudformationArtifactId="$infra_tag" \
              SystemStackName="$system_stack_name" \
              DomainName="$domain_name" \
              IsDefaultEnv="$is_default_env" \
              AppImageTag="$app_image_tag" \
              --no-fail-on-empty-changeset \
              --capabilities CAPABILITY_IAM \
              --capabilities CAPABILITY_NAMED_IAM
