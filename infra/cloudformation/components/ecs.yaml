AWSTemplateFormatVersion: 2010-09-09
Description: An example CloudFormation template for Fargate.
Parameters:
  EnvId:
    Type: String
    Description: Environment Id (used to namespace resources)
    AllowedPattern: "[a-z][a-z0-9]{2,19}"
    ConstraintDescription: Must be lower case letters between 3 and 20 characters.
  SystemId:
    Type: String
    Description: System Id (used to namespace resources)
    AllowedPattern: "[a-z][a-z0-9]{2,19}"
    ConstraintDescription: Must be lower case letters between 3 and 20 characters.
  VpcId:
    Type: "AWS::EC2::VPC::Id"
    Description: Select a VPC that allows instances to access the Internet.
  PublicSubnetIds:
    Type: CommaDelimitedList
    # Type: 'List<AWS::EC2::Subnet::Id>'
    Description: Subnet ids where public workloads should run.
  PrivateSubnetIds:
    Type: CommaDelimitedList
    # Type: 'List<AWS::EC2::Subnet::Id>'
    Description: Subnet ids where private workloads should run. I.e. workloads that should not be accessible via the public internet.
  RdsClientSecurityGroupId:
    Type: String
  LoadBalancerSecurityGroupId:
    Type: String

  ## Optional parameters.
  # These parameters are optional and are treated more like variables.
  DesiredCapacity:
    Type: Number
    Default: "1"
    Description: Number of instances to launch in your ECS cluster.
  MinSize:
    Type: Number
    Default: "1"
    Description: Minimum number of instances that should be launched in your ECS cluster.
  MaxSize:
    Type: Number
    Default: "1"
    Description: Maximum number of instances that can be launched in your ECS cluster.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      [
        t2.micro,
        t2.small,
        t2.medium,
        t2.large,
        m3.medium,
        m3.large,
        m3.xlarge,
        m3.2xlarge,
        m4.large,
        m4.xlarge,
        m4.2xlarge,
        m4.4xlarge,
        m4.10xlarge,
        c4.large,
        c4.xlarge,
        c4.2xlarge,
        c4.4xlarge,
        c4.8xlarge,
        c3.large,
        c3.xlarge,
        c3.2xlarge,
        c3.4xlarge,
        c3.8xlarge,
        r3.large,
        r3.xlarge,
        r3.2xlarge,
        r3.4xlarge,
        r3.8xlarge,
        i2.xlarge,
        i2.2xlarge,
        i2.4xlarge,
        i2.8xlarge,
      ]
    ConstraintDescription: Please choose a valid instance type.
  LatestECSOptimizedAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: "/aws/service/ecs/optimized-ami/amazon-linux-2023/recommended/image_id"

Resources:
  SshKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub "${SystemId}-${EnvId}-ecs-ec2-ssh-key"
      KeyType: ed25519
      Tags:
        - Key: SystemId
          Value: !Ref SystemId
        - Key: EnvId
          Value: !Ref EnvId

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ["-", ["omala", !Ref EnvId]]

  EC2Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecs:CreateCluster"
                  - "ecs:DeregisterContainerInstance"
                  - "ecs:DiscoverPollEndpoint"
                  - "ecs:Poll"
                  - "ecs:RegisterContainerInstance"
                  - "ecs:StartTelemetrySession"
                  - "ecs:Submit*"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  AutoscalingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "application-autoscaling:*"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:PutMetricAlarm"
                  - "ecs:DescribeServices"
                  - "ecs:UpdateService"
                Resource: "*"

  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role

  EcsSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref VpcId

  EcsSecurityGroupHTTPinbound:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  EcsSecurityGroupPrivateServices:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref EcsSecurityGroup

  EcsSecurityGroupSSHinbound:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0

  EcsSecurityGroupALBports:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 61000
      SourceSecurityGroupId: !Ref LoadBalancerSecurityGroupId

  ECSAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      VPCZoneIdentifier: !Ref PublicSubnetIds
      LaunchConfigurationName: !Ref ContainerInstances
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: "true"

  ContainerInstances:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      ImageId: !Ref LatestECSOptimizedAMI
      SecurityGroups:
        - !Ref EcsSecurityGroup
        - !Ref RdsClientSecurityGroupId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref SshKeyPair
      UserData: !Base64
        "Fn::Join":
          - ""
          - - |
              #!/bin/bash -xe
            - echo ECS_CLUSTER=
            - !Ref Cluster
            - |2
               >> /etc/ecs/ecs.config
            - |
              echo  ECS_RESERVED_MEMORY=32 >> /etc/ecs/ecs.config
            - |
              yum install -y aws-cfn-bootstrap
            - "/opt/aws/bin/cfn-signal -e $? "
            - "         --stack "
            - !Ref "AWS::StackName"
            - "         --resource ECSAutoScalingGroup "
            - "         --region "
            - !Ref "AWS::Region"
            - |+

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["/", ["", !Ref SystemId, !Ref EnvId]]


  CloudMapPrivateServiceDiscovery:
    Type: AWS::ServiceDiscovery::HttpNamespace
    Properties:
      Description: "Private namespace for ECS Service Discovery"
      Name: !Sub "${EnvId}"
      Tags: 
        - Key: EnvId
          Value: !Ref EnvId

Outputs:
  Cluster:
    Description: The ECS cluster
    Value: !Ref Cluster

  LogGroupName:
    Description: "LogGroup configurations for various services"
    Value: !Ref LogGroup
  CloudWatchLogGroupArn:
    Description: "LogGroup configurations Arn"
    Value: !GetAtt LogGroup.Arn
  ClusterArn:
    Description: The ECS cluster Arn
    Value: !GetAtt Cluster.Arn
