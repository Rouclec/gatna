AWSTemplateFormatVersion: '2010-09-09'
Metadata: 
  License: Apache-2.0
Description: 'Deploy gatna App'
Parameters:
  EnvId:
    Type: String
    Description: Environment Id (used to namespace resources)
    AllowedPattern: '[a-z][a-z0-9]{2,19}'
    ConstraintDescription: Must be lower case letters between 3 and 20 characters.
  SystemId:
    Type: String
    Description: System Id (used to namespace resources)
    AllowedPattern: '[a-z][a-z0-9]{2,19}'
    ConstraintDescription: Must be lower case letters between 3 and 20 characters.
  CloudformationArtifactId:
    Type: String
    Description: The id of the cloudformation templates to use for nested stacks. In CD this will be set to the git sha for the current commit.
  SystemStackName:
    Type: String
    Description: The stack id of the system. (Used for cross stack references.)
  DomainName:
    Type: String
    Description: The base domain name for the api. A subdomain will be added for the api domain.
  IsDefaultEnv:
    Type: String
    AllowedValues: ["true", "false"]
    Description: If this is 'true', then no subdomain is added to the domain name
  AppImageTag:
    Type: String
    Description: The tag of the NextJs App image to be deployed


Mappings:
  Region2S3WebsiteSuffix:
    us-east-1:
      Suffix: .s3-website-us-east-1.amazonaws.com
    us-west-1:
      Suffix: .s3-website-us-west-1.amazonaws.com
    us-west-2:
      Suffix: .s3-website-us-west-2.amazonaws.com
    eu-west-1:
      Suffix: .s3-website-eu-west-1.amazonaws.com
    ap-northeast-1:
      Suffix: .s3-website-ap-northeast-1.amazonaws.com
    ap-northeast-2:
      Suffix: .s3-website-ap-northeast-2.amazonaws.com
    ap-southeast-1:
      Suffix: .s3-website-ap-southeast-1.amazonaws.com
    ap-southeast-2:
      Suffix: .s3-website-ap-southeast-2.amazonaws.com
    ap-south-1:
      Suffix: .s3-website-ap-south-1.amazonaws.com
    us-east-2:
      Suffix: .s3-website-us-east-2.amazonaws.com
    sa-east-1:
      Suffix: .s3-website-sa-east-1.amazonaws.com
    cn-north-1:
      Suffix: .s3-website.cn-north-1.amazonaws.com.cn
    eu-central-1:
      Suffix: .s3-website.eu-central-1.amazonaws.com
Conditions:
  IsDefaultEnv: 
    !Equals [!Ref IsDefaultEnv, "true"]
  IsProd: 
    !Equals [!Ref EnvId, "prod"]


Resources:
# @VpcStack set up VPC availability zones for Resources...
  VpcStack:
    Type: AWS::CloudFormation::Stack
    Properties: 
      Parameters: 
        EnvId: !Ref 'EnvId'
      Tags:
        - Key: SystemId
          Value: !Ref 'SystemId'
        - Key: EnvId
          Value: !Ref 'EnvId'
      TemplateURL: !Join [ "", ["https://s3.amazonaws.com/", !ImportValue 'artifact-account-setup-InfraArtifactsBucket', "/cloudformation/", !Ref 'CloudformationArtifactId', "/components/vpc-2azs.yaml"  ]]

  # SecretsStack:
  #   Type: AWS::CloudFormation::Stack
  #   Properties: 
  #     TemplateURL: !Join [ "", ["https://s3.amazonaws.com/", !ImportValue 'artifact-account-setup-InfraArtifactsBucket', "/cloudformation/", !Ref 'CloudformationArtifactId', "/components/third_party_secrets.yaml"  ]]
  #     Parameters: 
  #       EnvId: !Ref 'EnvId'
  #       SystemId: !Ref 'SystemId'
  #     Tags: 
  #       - Key: EnvId
  #         Value: !Ref 'EnvId'
  #       - Key: SystemId
  #         Value: !Ref 'SystemId'

  WebCert:
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Join ["", [!If [IsDefaultEnv, "", !Sub "${EnvId}."], !Ref "DomainName" ]]
      SubjectAlternativeNames:
        - !Join ["", ["www.",!If [IsDefaultEnv, "", !Sub "${EnvId}."], !Ref "DomainName" ]]
        - !Join ["", ["api.",!If [IsDefaultEnv, "", !Sub "${EnvId}."], !Ref "DomainName" ]]
        - !Join ["", ["pgadmin.",!If [IsDefaultEnv, "", !Sub "${EnvId}."], !Ref "DomainName" ]]

      ValidationMethod: DNS
      Tags: 
        - Key: EnvId
          Value: !Ref 'EnvId'
        - Key: SystemId
          Value: !Ref 'SystemId'

  # LoadBalancerStack:
  #   Type: AWS::CloudFormation::Stack
  #   DependsOn: [VpcStack, WebCert]
  #   Properties: 
  #     TemplateURL: !Join [ "", ["https://s3.amazonaws.com/", !ImportValue 'artifact-account-setup-InfraArtifactsBucket', "/cloudformation/", !Ref 'CloudformationArtifactId', "/components/load_balancer.yaml"  ]]
  #     Parameters: 
  #       EnvId: !Ref 'EnvId'
  #       SystemId: !Ref 'SystemId'
  #       VPC:  !GetAtt  VpcStack.Outputs.VPC
  #       SubnetA: !GetAtt  VpcStack.Outputs.SubnetAPublic
  #       SubnetB: !GetAtt  VpcStack.Outputs.SubnetBPublic
  #       CertificateArn: !Ref WebCert
  #     Tags: 
  #       - Key: EnvId
  #         Value: !Ref 'EnvId'
  #       - Key: SystemId
  #         Value: !Ref 'SystemId'
  # # Setup ECS Cluster
  # EcsStack:
  #   Type: AWS::CloudFormation::Stack
  #   DependsOn: [VpcStack]
  #   Properties: 
  #     Parameters: 
  #       VpcId: !GetAtt VpcStack.Outputs.VPC
  #       PublicSubnetIds: !Join [",", [!GetAtt VpcStack.Outputs.SubnetAPublic, !GetAtt VpcStack.Outputs.SubnetBPublic]]
  #       PrivateSubnetIds: !Join [",", [!GetAtt VpcStack.Outputs.SubnetAPrivate, !GetAtt VpcStack.Outputs.SubnetBPrivate]]
  #       EnvId: !Ref EnvId
  #       SystemId: !Ref SystemId
  #       InstanceType: !If [IsProd, t2.small, t2.micro]
  #       RdsClientSecurityGroupId: !GetAtt RdsStack.Outputs.ClientSecurityGroupId
  #       LoadBalancerSecurityGroupId: !GetAtt LoadBalancerStack.Outputs.LoadBalancerSecurityGroupId
  #       MinSize: 2
  #       DesiredCapacity: 2
  #       MaxSize: 2
  #     Tags: 
  #       - Key: EnvId
  #         Value: !Ref 'EnvId'
  #       - Key: SystemId
  #         Value: !Ref 'SystemId'
  #     TemplateURL: !Join [ "", ["https://s3.amazonaws.com/", !ImportValue 'artifact-account-setup-InfraArtifactsBucket', "/cloudformation/", !Ref 'CloudformationArtifactId', "/components/ecs.yaml"  ]]
  
  # S3BucketStack:
  #   Type: AWS::CloudFormation::Stack
  #   Properties: 
  #     Parameters: 
  #       DomainName: !Ref DomainName
  #       SubDomain: !If [IsDefaultEnv, "", !Sub "${EnvId}."]
  #     Tags: 
  #       - Key: EnvId
  #         Value: !Ref 'EnvId'
  #       - Key: SystemId
  #         Value: !Ref 'SystemId'
  #     TemplateURL: !Join [ "", ["https://s3.amazonaws.com/", !ImportValue 'artifact-account-setup-InfraArtifactsBucket', "/cloudformation/", !Ref 'CloudformationArtifactId', '/components/s3_buckets.yaml' ]]
 
  # S3BucketPolicies:
  #   DependsOn: [ S3BucketStack]
  #   Type: AWS::CloudFormation::Stack
  #   Properties: 
  #     Parameters: 
  #       DomainName: !Ref DomainName
  #       SubDomain: !If [IsDefaultEnv, "", !Sub "${EnvId}."]
  #       ProfilePictureBucket: !GetAtt S3BucketStack.Outputs.ProfilePictureBucket
  #       ApiTaskRoleArn: !GetAtt ApiStack.Outputs.ApiTaskRoleArn
  #       AppTaskRoleArn: !GetAtt AppStack.Outputs.AppTaskRoleArn
  #     Tags: 
  #       - Key: EnvId
  #         Value: !Ref 'EnvId'
  #       - Key: SystemId
  #         Value: !Ref 'SystemId'
  #     TemplateURL: !Join [ "", ["https://s3.amazonaws.com/", !ImportValue 'artifact-account-setup-InfraArtifactsBucket', "/cloudformation/", !Ref 'CloudformationArtifactId', '/components/s3_bucket_policies.yaml' ]]
 
  # LogProcessorSqsQueueStack:
  #   Type: AWS::CloudFormation::Stack
  #   Properties: 
  #     Parameters: 
  #       EnvId: !Ref 'EnvId'
  #       SystemId: !Ref 'SystemId'
  #     Tags: 
  #       - Key: EnvId
  #         Value: !Ref 'EnvId'
  #       - Key: SystemId
  #         Value: !Ref 'SystemId'
  #     TemplateURL: !Join [ "", ["https://s3.amazonaws.com/", !ImportValue 'artifact-account-setup-InfraArtifactsBucket', "/cloudformation/", !Ref 'CloudformationArtifactId', '/components/sqs_queue.yaml' ]]
 
  # SeSDomainIdentities:
  #   Type: AWS::CloudFormation::Stack
  #   Properties: 
  #     Parameters: 
  #       DomainName: !Ref DomainName
  #       SubDomain: !If [IsDefaultEnv, "", !Sub "${EnvId}."]
  #     Tags: 
  #       - Key: EnvId
  #         Value: !Ref 'EnvId'
  #       - Key: SystemId
  #         Value: !Ref 'SystemId'
  #     TemplateURL: !Join [ "", ["https://s3.amazonaws.com/", !ImportValue 'artifact-account-setup-InfraArtifactsBucket', "/cloudformation/", !Ref 'CloudformationArtifactId', "/components/ses_identities.yaml"]]
  
  # AppStack:
  #   Type: AWS::CloudFormation::Stack
  #   DependsOn: [VpcStack, SecretsStack]
  #   Properties: 
  #     Parameters: 
  #       EnvId: !Ref 'EnvId'
  #       SystemId: !Ref 'SystemId'
  #       VPC:  !GetAtt  VpcStack.Outputs.VPC
  #       AppImageTag: !Ref AppImageTag
  #       LogGroupName: !GetAtt EcsStack.Outputs.LogGroupName
  #       FirebaseSecretArn: !GetAtt SecretsStack.Outputs.FirebaseSecretArn
  #       LoadBalancerSecurityGroupId: !GetAtt LoadBalancerStack.Outputs.LoadBalancerSecurityGroupId
  #       LoadBalancerCanonicalHostedZoneID: !GetAtt LoadBalancerStack.Outputs.LoadBalancerCanonicalHostedZoneID
  #       ClusterArn: !GetAtt EcsStack.Outputs.ClusterArn
  #       LoadBalancerSecurityGroupId: !GetAtt LoadBalancerStack.Outputs.LoadBalancerSecurityGroupId
  #       SubnetA: !GetAtt  VpcStack.Outputs.SubnetAPublic
  #       SubnetB: !GetAtt  VpcStack.Outputs.SubnetBPublic
  #       DomainName: !Ref DomainName
  #       SubDomain: !If [IsDefaultEnv, "", !Sub "${EnvId}."]
  #       LoadBalancerDNSName: !GetAtt LoadBalancerStack.Outputs.LoadBalancerDNSName
  #       LoadBalancerArn: !GetAtt LoadBalancerStack.Outputs.LoadBalancerArn
  #       HttpsListener: !GetAtt LoadBalancerStack.Outputs.HttpsListener
  #     Tags: 
  #       - Key: EnvId
  #         Value: !Ref 'EnvId'
  #       - Key: SystemId
  #         Value: !Ref 'SystemId'
  #     TemplateURL: !Join [ "", ["https://s3.amazonaws.com/", !ImportValue 'artifact-account-setup-InfraArtifactsBucket', "/cloudformation/", !Ref 'CloudformationArtifactId', '/services/app.yaml' ]]