AWSTemplateFormatVersion: 2010-09-09
Description: The APP service
Parameters:
    EnvId:
        Type: String
        Description: Environment Id (used to namespace resources)
        AllowedPattern: '[a-z][a-z0-9]{2,19}'
        ConstraintDescription: Must be lower case letters between 3 and 20 characters.
    SystemId:
        Type: String
        Description: System Id (used to namespace resources)
        AllowedPattern: '[a-z][a-z0-9]{2,19}'
        ConstraintDescription: Must be lower case letters between 3 and 20 characters.
    ContainerPort:
        Type: Number
        Default: 3000
    VPC:
        Type: AWS::EC2::VPC::Id
    LogGroupName:
        Type: String
        Description: LogGroup name that should be use for the service
    ClusterArn:
        Type: String
    HttpsListener:
        Type: String
        Description: Default listener from the Load Balancers reference in the ListenerRule
    SubnetA:
        Type: AWS::EC2::Subnet::Id
    SubnetB:
        Type: AWS::EC2::Subnet::Id
    DomainName:
        Type: String
    SubDomain:
        Type: String
        Description: "Subdomain for the environment. Note, this string should include a trailing dot, Example, 'dev.'"
    LoadBalancerArn:
        Type: String
    LoadBalancerDNSName:
        Type: String
    LoadBalancerCanonicalHostedZoneID:
        Type: String
    LoadBalancerSecurityGroupId:
        Type: String
    AppImageTag:
        Type: String
    FirebaseSecretArn:
        Type: String
    GeneralSecretArn:
        Type: String
    MailSecretArn:
        Type: String

Resources:
    # A role needed by ECS to Start the NextJA App
    AppExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName:
                !Join [
                    '-',
                    [!Ref SystemId, !Ref EnvId, AppEcsExecutionRole-ec2],
                ]
            AssumeRolePolicyDocument:
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: ecs-tasks.amazonaws.com
                      Action: 'sts:AssumeRole'
            ManagedPolicyArns:
                - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
            Policies:
                - PolicyName: root
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          - Effect: Allow
                            Action:
                                - 'secretsmanager:GetResourcePolicy'
                                - 'secretsmanager:GetSecretValue'
                                - 'secretsmanager:DescribeSecret'
                                - 'secretsmanager:ListSecretVersionIds'
                                - 'secretsmanager:ListSecrets'
                            Resource:
                                - !Ref FirebaseSecretArn
                                - !Ref GeneralSecretArn
                                - !Ref MailSecretArn

    # A role for the containers
    AppTaskRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName:
                !Join ['-', [!Ref SystemId, !Ref EnvId, App, TaskRole-ec2]]
            AssumeRolePolicyDocument:
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: ecs-tasks.amazonaws.com
                      Action: 'sts:AssumeRole'

    AppTaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            # Name of the task definition. Subsequent versions of the task definition are grouped together under this name.
            Family: !Join ['-', [!Ref SystemId, !Ref EnvId, AppTaskDefinition]]
            # bridge mode is required so that we can run multiple tasks per ec2 instance.
            # awcvpc mode requires one ENI per task and t2.micro's can only have 2 ENI.
            NetworkMode: bridge
            RequiresCompatibilities:
                - EC2
            # CPU value is basically ignored on ec2 instances.
            Cpu: 512
            Memory: 1024
            ExecutionRoleArn: !Ref AppExecutionRole
            # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
            TaskRoleArn: !Ref AppTaskRole
            ContainerDefinitions:
                - Name: App
                  Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/rouclec/gatna-app:${AppImageTag}'
                  PortMappings:
                      - ContainerPort: !Ref ContainerPort
                  # Send logs to CloudWatch Logs
                  LogConfiguration:
                      LogDriver: awslogs
                      Options:
                          awslogs-region: !Ref AWS::Region
                          awslogs-group: !Ref LogGroupName
                          awslogs-stream-prefix: ecs
                  Environment:
                      - Name: NODE_ENV
                        Value: production
                    #   - Name: NEXTAUTH_URL
                    #     Value: !Sub 'https://${SubDomain}${DomainName}'
                      - Name: VIDEO_SERVER_API
                        Value: "https://dev.vdocipher.com/api"

                      
                  Secrets:
                      - Name: NEXT_PUBLIC_API_KEY
                        ValueFrom: !Sub '${FirebaseSecretArn}:apiKey::'
                      - Name: NEXT_PUBLIC_AUTH_DOMAIN
                        ValueFrom: !Sub '${FirebaseSecretArn}:authDomain::'
                      - Name: NEXT_PUBLIC_PROJECT_ID
                        ValueFrom: !Sub '${FirebaseSecretArn}:projectId::'
                      - Name: NEXT_PUBLIC_STORAGE_BUCKET
                        ValueFrom: !Sub '${FirebaseSecretArn}:storageBucket::'
                      - Name: NEXT_PUBLIC_MESSAGING_SENDER_ID
                        ValueFrom: !Sub '${FirebaseSecretArn}:messagingSenderId::'
                      - Name: NEXT_PUBLIC_APP_ID
                        ValueFrom: !Sub '${FirebaseSecretArn}:appId::'
                      - Name: NEXT_PUBLIC_MEASUREMENT_ID
                        ValueFrom: !Sub '${FirebaseSecretArn}:measurementId::'
                      - Name: NEXT_PUBLIC_GOOGLE_MAP_API
                        ValueFrom: !Sub '${GeneralSecretArn}:nextPublicGoogleMapApi::'
                      - Name: MONGODB_URI
                        ValueFrom: !Sub '${GeneralSecretArn}:mongoDbUri::'
                      - Name: NEXTAUTH_SECRET
                        ValueFrom: !Sub '${GeneralSecretArn}:nextAuthSecret::'
                      - Name: ENCRYPTION_KEY
                        ValueFrom: !Sub '${GeneralSecretArn}:encryptionKey::'
                      - Name: MAIL_API_KEY
                        ValueFrom: !Sub '${MailSecretArn}:mailApiKey::'
                      - Name: EMAIL_FROM
                        ValueFrom: !Sub '${MailSecretArn}:emailFrom::'
                      - Name: CONTACT_EMAIL
                        ValueFrom: !Sub '${MailSecretArn}:contactEmail::'
                      - Name: ELASTIC_EMAIL_SENDER_EMAIL
                        ValueFrom: !Sub '${MailSecretArn}:elasticEmailSenderEmail::'
                      - Name: ELASTIC_EMAIL_SMTP_USERNAME
                        ValueFrom: !Sub '${MailSecretArn}:elasticEmailSmtpUsername::'
                      - Name: ELASTIC_EMAIL_SMTP_PASSWORD
                        ValueFrom: !Sub '${MailSecretArn}:elasticEmailSmtpPassword::'
                      


    AppService:
        Type: AWS::ECS::Service
        DependsOn: [AppTargetGroup, AppListenerRule]
        Properties:
            ServiceName: !Sub '${SystemId}-${EnvId}-gatna-app-ec2'
            Cluster: !Ref ClusterArn
            TaskDefinition: !Ref AppTaskDefinition
            DeploymentConfiguration:
                MinimumHealthyPercent: 50
                MaximumPercent: 200
            DesiredCount: 2
            # This may need to be adjusted if the container takes a while to start up
            HealthCheckGracePeriodSeconds: 30
            LaunchType: EC2
            LoadBalancers:
                - ContainerName: App
                  ContainerPort: !Ref ContainerPort
                  TargetGroupArn: !Ref AppTargetGroup

    AppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: '/'
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            HealthyThresholdCount: 2
            Name: !Join ['-', [!Ref SystemId, !Ref EnvId, AppTargetGroup3]]
            Protocol: HTTP
            Port: !Ref ContainerPort
            TargetGroupAttributes:
                - Key: deregistration_delay.timeout_seconds
                  Value: 60 # default is 300
            TargetType: instance
            VpcId: !Ref VPC

    AppListenerRule:
        Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
        Properties:
            Actions:
                - Type: forward
                  TargetGroupArn: !Ref AppTargetGroup
            Conditions:
                - Field: host-header
                  HostHeaderConfig:
                      Values:
                          - !Sub 'www.${SubDomain}${DomainName}'
                          - !Sub '${SubDomain}${DomainName}'
            ListenerArn: !Ref HttpsListener
            Priority: 2

    AppDNSRecord:
        Type: AWS::Route53::RecordSet
        Properties:
            HostedZoneName: !Join ['', [!Ref DomainName, .]]
            Name: !Join ['', [!Ref SubDomain, !Ref DomainName, .]]
            Type: A
            AliasTarget:
                DNSName: !Ref LoadBalancerDNSName
                HostedZoneId: !Ref LoadBalancerCanonicalHostedZoneID

Outputs:
    AppTaskRoleArn:
        Description: gatna app task role arn exported from app.yaml stack
        Value: !GetAtt AppTaskRole.Arn